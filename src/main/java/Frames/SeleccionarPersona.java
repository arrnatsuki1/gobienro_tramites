/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames;

import DAO.IPersonaDAO;
import DAO.PersonaDAO;
import Entidades.Persona;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import swing_propio.GobiernoButton;

/**
 * Clase para poder seleccionar a una persona dentro de una lista y poder
 * ver sus tramites
 * @author Rosa Rodriguez y Jose Trista
 */
public class SeleccionarPersona extends javax.swing.JFrame {
    /**
     * Conexion con la base para poder obtener a todas las personas deseadas
     */
    private final IPersonaDAO daopersona;
    /**
     * Persona seleccionada de la lista de personas
     */
    private Persona personaSeleccionada;

    /**
     * Metodo constructor que incia los componentes basicos y crea una conexion
     * con la base de datos para mostrar a todas las personas registradas
     */
    public SeleccionarPersona() {
        initComponents();
        daopersona = new PersonaDAO();

        this.personaSeleccionada = new Persona();

        tablaPersonas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2) {

                    dobleClick(evt);

                }
            }

        });
        mostrarTabla(listaTablaActual());
        this.setVisible(true);
    }

    /**
     * Metodo para seleccionar una fila con doble click y poder pasar al Frame
     * de reportes
     *
     * @param evt
     */
    private void dobleClick(MouseEvent evt) {
        JTable tabla = (JTable) evt.getSource();
        
        //por si selecciona mÃ¡s de una fila
        if(tabla.getSelectedRowCount() > 1) {
            return;
        }
        
        int row = tabla.getSelectedRow();
        Persona dummy = daopersona.consultarRFC((String) tabla.getValueAt(row, 3));

        personaSeleccionada.setId(dummy.getId());
        personaSeleccionada.setDiscapacitado(dummy.getDiscapacitado());
        personaSeleccionada.setFechaNacimiento(dummy.getFechaNacimiento());
        personaSeleccionada.setNombre(dummy.getNombre());
        personaSeleccionada.setPrimerApellido(dummy.getPrimerApellido());
        personaSeleccionada.setRFC(dummy.getRFC());
        personaSeleccionada.setSegundoApellido(dummy.getSegundoApellido());
        personaSeleccionada.setTelefono(dummy.getTelefono());
        personaSeleccionada.setTramites(dummy.getTramites());
        personaSeleccionada.setVehiculos(dummy.getVehiculos());

        if (personaSeleccionada == null) {
            System.out.println("ERROR DOBLE CLICK");
        }
        Reporte reporte = new Reporte(true, personaSeleccionada);
        reporte.setVisible(true);
        this.dispose();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtRfc = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPersonas = new javax.swing.JTable();
        btnBuscar = new GobiernoButton();
        btnRegresar = new GobiernoButton();
        calendario = new com.github.lgooddatepicker.components.CalendarPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RFC");
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 80, -1));

        txtRfc.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        txtRfc.setBackground(new java.awt.Color(255, 255, 255));
        txtRfc.setBorder(null);
        txtRfc.setCaretColor(new java.awt.Color(0, 0, 0));
        txtRfc.setForeground(new java.awt.Color(51, 51, 51));
        txtRfc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRfcKeyReleased(evt);
            }
        });
        background.add(txtRfc, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 160, 20));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Nombre");
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        background.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 60, 70, -1));

        txtNombre.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        txtNombre.setBackground(new java.awt.Color(255, 255, 255));
        txtNombre.setBorder(null);
        txtNombre.setCaretColor(new java.awt.Color(0, 0, 0));
        txtNombre.setForeground(new java.awt.Color(51, 51, 51));
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombreKeyReleased(evt);
            }
        });
        background.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 160, 20));

        jLabel3.setText("Fecha de nacimiento :");
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        background.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tablaPersonas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Primer Apellido", "Segundo Apellido", "RFC"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPersonas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaPersonas.setShowGrid(true);
        jScrollPane1.setViewportView(tablaPersonas);

        background.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 360, 370));

        btnBuscar.setText("Buscar");
        btnBuscar.setBackground(new java.awt.Color(255, 255, 255));
        btnBuscar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(157, 36, 73), 2, true));
        btnBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscar.setForeground(new java.awt.Color(0, 0, 0));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        background.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 70, 30));

        btnRegresar.setText("Regresar");
        btnRegresar.setBackground(new java.awt.Color(255, 255, 255));
        btnRegresar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(157, 36, 73), 2, true));
        btnRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegresar.setForeground(new java.awt.Color(0, 0, 0));
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        background.add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 80, 30));

        calendario.setBackground(new java.awt.Color(255, 255, 255));
        calendario.setForeground(new java.awt.Color(0, 0, 0));
        background.add(calendario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));
        background.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 160, -1));
        background.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 160, 10));

        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 390));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Cada vez que se escribe un rfc, busca gente que tenga ese mismo rfc
     *
     * @param evt
     */
    private void txtRfcKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRfcKeyReleased
        mostrarTabla(listaTablaActual());
    }//GEN-LAST:event_txtRfcKeyReleased
    /**
     * Cada vez que se escribe un nombre busca en la base de datos gente con ese
     * mismo nombre
     *
     * @param evt
     */
    private void txtNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyReleased
        mostrarTabla(listaTablaActual());
    }//GEN-LAST:event_txtNombreKeyReleased
    /**
     * comienza la busqueda dentro de la base de datos
     *
     * @param evt
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        mostrarTabla(listaTablaActual());
    }//GEN-LAST:event_btnBuscarActionPerformed
    /**
     * Cierra la ventana de SeleccionarPersona y regresa al menu principal
     *
     * @param evt
     */
    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        Principal principal = new Principal(false, null);
        principal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    /**
     * Metodo para obteber a todas las personas segun parametros, en caso de que
     * el RFC no este llenado va a buscar personas con un RFC similar en caso de
     * que el nombre y la fecha no esten vacios va a buscar a personas que hayan
     * nacido el mismo dia y compartan el mismo nombre, y en caso de que solo el
     * anio de nacimiento no este vacio va a buscar a todas las personas que
     * hayan nacido ese dia
     *
     * @return Lista  con todas las personas que concuerdan con las
     * caracteristicas anteriores
     */
    public List<Persona> listaTablaActual() {
        List<Persona> listaPersonasActual = new ArrayList();

        if (txtNombre.getText().equals("") && txtRfc.getText().equals("")
                && calendario.getSelectedDate() == null) {
            return daopersona.consultarTodos();
        }

        boolean nombre = false, nacimiento = false;

        if (!txtRfc.getText().equals("")) {

            listaPersonasActual = daopersona.consultarRFClista(txtRfc.getText());

            return listaPersonasActual;
        }

        if (!txtNombre.getText().equalsIgnoreCase("")) {
            nombre = true;
        }

        LocalDate fecha = calendario.getSelectedDate();
        Calendar fecha_nacimiento = new GregorianCalendar();

        if (fecha != null) {
            nacimiento = true;
            fecha_nacimiento.set(fecha.getYear(), fecha.getMonthValue() - 1, fecha.getDayOfMonth());
        }

        if (nombre && nacimiento) {

            listaPersonasActual = daopersona.buscarPorNacimiento(fecha_nacimiento);
            listaPersonasActual = this.buscarporNombre(listaPersonasActual);

            return listaPersonasActual;
        }

        if (nombre) {

            listaPersonasActual = daopersona.consultarTodos();

            listaPersonasActual = this.buscarporNombre(listaPersonasActual);
            return listaPersonasActual;
        }

        if (nacimiento) {

            listaPersonasActual = daopersona.buscarPorNacimiento(fecha_nacimiento);
            if (listaPersonasActual == null || listaPersonasActual.isEmpty()) {
                listaPersonasActual = new ArrayList();
            }
            return listaPersonasActual;
        }
        return listaPersonasActual;

    }

    /**
     * Metodo para buscar a una persona por su RFC
     *
     * @return Persona que concuerda con ese RFC null en caso de algun error o
     * de no encontrarla
     */
    private Persona buscarPorRFC() {

        Persona p = daopersona.consultarRFC(txtRfc.getText().toUpperCase());

        if (p == null) {
            return null;
        }

        return p;
    }

    /**
     * Metodo para obtener una lista con todas las personas que coincidan con un
     * nombre/texto
     *
     * @param listapersona List<Persona> todas las personas de la base de datos
     * @return List<Persona> con todas las personas que coinciden en un texto
     * dentro de su nombre
     */
    private List<Persona> buscarporNombre(List<Persona> listapersona) {
        List<Persona> listaAuxiliar = new ArrayList<Persona>();
        for (Persona persona : listapersona) {
            String nombreCompleto = persona.getNombre() + " "
                    + "" + persona.getPrimerApellido() + " "
                    + "" + persona.getSegundoApellido();
            if (nombreCompleto.toLowerCase().contains(txtNombre.getText().toLowerCase())) {
                listaAuxiliar.add(persona);
            }
        }
        return listaAuxiliar;
    }

    /**
     * Metodo para mostar en la tabla una lista de personas
     *
     * @param lista List<Persona> con las personas a mostrar
     */
    private void mostrarTabla(List<Persona> lista) {
        DefaultTableModel modelo = (DefaultTableModel) tablaPersonas.getModel();
        modelo.setRowCount(0);
        for (Persona persona : lista) {
            Object[] datos = new Object[modelo.getColumnCount()];
            datos[0] = persona.getNombre();
            datos[1] = persona.getPrimerApellido();
            datos[2] = persona.getSegundoApellido();
            datos[3] = persona.getRFC();
            modelo.addRow(datos);
        }
    }

    /**
     * Variables declaration - do not modify  
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnRegresar;
    private com.github.lgooddatepicker.components.CalendarPanel calendario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tablaPersonas;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtRfc;
    // End of variables declaration//GEN-END:variables
}
